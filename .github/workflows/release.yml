name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Container Images
            
            - Monitor: `ghcr.io/${{ github.repository }}/monitor:${{ steps.version.outputs.version }}`
            - API Server: `ghcr.io/${{ github.repository }}/api-server:${{ steps.version.outputs.version }}`
            - CLI: `ghcr.io/${{ github.repository }}/cli:${{ steps.version.outputs.version }}`

  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Build binaries
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          cd go
          mkdir -p ../dist
          
          # Build monitor
          go build -ldflags "-X main.version=${{ needs.release.outputs.version }}" \
            -o ../dist/truenas-monitor-${{ matrix.os }}-${{ matrix.arch }} \
            ./cmd/monitor
            
          # Build API server
          go build -ldflags "-X main.version=${{ needs.release.outputs.version }}" \
            -o ../dist/truenas-api-server-${{ matrix.os }}-${{ matrix.arch }} \
            ./cmd/api-server
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        working-directory: ./python
        run: |
          # Update version
          sed -i "s/version = \".*\"/version = \"${{ needs.release.outputs.version }}\"/" pyproject.toml
          python -m build
          
      - name: Upload to PyPI
        working-directory: ./python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [api-server, monitor]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/container/Containerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  publish-helm:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [release, build-containers]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        
      - name: Package Helm chart
        run: |
          # Update chart version
          sed -i "s/version: .*/version: ${{ needs.release.outputs.version }}/" deploy/helm/truenas-monitor/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: ${{ needs.release.outputs.version }}/" deploy/helm/truenas-monitor/Chart.yaml
          
          helm package deploy/helm/truenas-monitor
          
      - name: Upload Helm chart
        run: |
          # Skip if helm chart doesn't exist yet
          if [ ! -d deploy/helm/truenas-monitor ]; then
            echo "Helm chart not found, skipping upload"
            exit 0
          fi
          
          # Upload to release
          gh release upload ${{ github.ref_name }} ./truenas-monitor-${{ needs.release.outputs.version }}.tgz
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}