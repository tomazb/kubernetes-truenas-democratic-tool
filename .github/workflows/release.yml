name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Container Images
            
            - Monitor: `ghcr.io/${{ github.repository }}/monitor:${{ steps.version.outputs.version }}`
            - API Server: `ghcr.io/${{ github.repository }}/api-server:${{ steps.version.outputs.version }}`
            - CLI: `ghcr.io/${{ github.repository }}/cli:${{ steps.version.outputs.version }}`

  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Build binaries
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          cd go
          mkdir -p ../dist
          
          # Build monitor
          go build -ldflags "-X main.version=${{ needs.release.outputs.version }}" \
            -o ../dist/truenas-monitor-${{ matrix.os }}-${{ matrix.arch }} \
            ./cmd/monitor
            
          # Build API server
          go build -ldflags "-X main.version=${{ needs.release.outputs.version }}" \
            -o ../dist/truenas-api-server-${{ matrix.os }}-${{ matrix.arch }} \
            ./cmd/api-server
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        working-directory: ./python
        run: |
          # Update version
          sed -i "s/version = \".*\"/version = \"${{ needs.release.outputs.version }}\"/" pyproject.toml
          python -m build
          
      - name: Upload to PyPI
        working-directory: ./python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [monitor, api-server, cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Podman and buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah qemu-user-static
        
      - name: Log in to Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
      - name: Build and push multi-arch image
        run: |
          # Build for multiple architectures
          buildah manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest
          
          # Build AMD64
          buildah bud --arch amd64 -f ./deploy/container/Containerfile.${{ matrix.component }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-amd64 .
          buildah push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-amd64
          buildah manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-amd64
          
          # Build ARM64
          buildah bud --arch arm64 -f ./deploy/container/Containerfile.${{ matrix.component }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-arm64 .
          buildah push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-arm64
          buildah manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-arm64
          
          # Push manifest
          buildah manifest push --all ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest
          
          # Also tag with version
          buildah manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ needs.release.outputs.version }}
          buildah manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ needs.release.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-amd64
          buildah manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ needs.release.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:latest-arm64
          buildah manifest push --all ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}:${{ needs.release.outputs.version }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

  publish-helm:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [release, build-containers]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        
      - name: Package Helm chart
        run: |
          # Update chart version
          sed -i "s/version: .*/version: ${{ needs.release.outputs.version }}/" deploy/helm/truenas-monitor/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: ${{ needs.release.outputs.version }}/" deploy/helm/truenas-monitor/Chart.yaml
          
          helm package deploy/helm/truenas-monitor
          
      - name: Upload Helm chart
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./truenas-monitor-${{ needs.release.outputs.version }}.tgz
          asset_name: truenas-monitor-${{ needs.release.outputs.version }}.tgz
          asset_content_type: application/gzip