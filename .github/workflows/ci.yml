name: Enhanced CI Pipeline

on:
  pull_request:
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scans

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Go build and test matrix
  go-test:
    name: Go Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go/go.sum
          
      - name: Verify Go modules
        working-directory: ./go
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code
        
      - name: Run Go tests with race detection
        working-directory: ./go
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: secrets.CODECOV_TOKEN != ''
        with:
          file: ./go/coverage.out
          flags: go,${{ matrix.os }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-${{ matrix.os }}-go${{ matrix.go-version }}
          path: go/coverage.html

      - name: Benchmark tests
        working-directory: ./go
        run: go test -bench=. -benchmem ./... | tee benchmark.txt
        
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: go-benchmarks-${{ matrix.os }}-go${{ matrix.go-version }}
          path: go/benchmark.txt

  # Go linting and code quality
  go-lint:
    name: Go Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum
          
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: go
          args: --timeout=5m --config=../.golangci.yml
          
      - name: Run go vet
        working-directory: ./go
        run: go vet ./...
        
      - name: Run staticcheck
        working-directory: ./go
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
          
      - name: Check Go formatting
        working-directory: ./go
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi
          
      - name: Check for ineffective assignments
        working-directory: ./go
        run: |
          go install github.com/gordonklaus/ineffassign@latest
          ineffassign ./...

  # Security scanning for Go
  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum
          
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
          working-directory: go
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: go/gosec.sarif
          
      - name: Run Nancy vulnerability scanner
        working-directory: ./go
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth --loud
          
      - name: Check for known vulnerabilities
        working-directory: ./go
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Python tests with multiple versions
  python-test:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: python/requirements*.txt
          
      - name: Install dependencies
        working-directory: ./python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Run tests with coverage
        working-directory: ./python
        run: |
          pytest tests/ --cov=truenas_storage_monitor --cov-report=xml --cov-report=html --cov-fail-under=60 -v
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: secrets.CODECOV_TOKEN != ''
        with:
          file: ./python/coverage.xml
          flags: python,${{ matrix.os }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: python/htmlcov/

  # Python linting and code quality
  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint bandit safety
          
      - name: Run Black formatter check
        working-directory: ./python
        run: black . --check --diff
        
      - name: Run isort import sorting check
        working-directory: ./python
        run: isort . --check --diff
        
      - name: Run Flake8 linter
        working-directory: ./python
        run: flake8 . --statistics
        
      - name: Run MyPy type checking
        working-directory: ./python
        run: mypy . --ignore-missing-imports
        
      - name: Run Pylint
        working-directory: ./python
        run: pylint truenas_storage_monitor/ --fail-under=8.0
        
      - name: Run Bandit security scanner
        working-directory: ./python
        run: bandit -r . -f json -o bandit-report.json
        
      - name: Run Safety dependency vulnerability scanner
        working-directory: ./python
        run: safety check --json --output safety-report.json
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            python/bandit-report.json
            python/safety-report.json

  # Container builds and security scanning
  container-build:
    name: Container Build & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, monitor]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/container/Containerfile.${{ matrix.component }}
          push: false
          tags: test-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-${{ matrix.component }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'
          
      - name: Run container structure test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Create structure test config
          cat > structure-test-${{ matrix.component }}.yaml << EOF
          schemaVersion: 2.0.0
          commandTests:
            - name: "help command"
              command: ["/app/bin/${{ matrix.component }}", "--help"]
              expectedOutput: ["Usage:"]
          fileExistenceTests:
            - name: "binary exists"
              path: "/app/bin/${{ matrix.component }}"
              shouldExist: true
          EOF
          
          container-structure-test test --image test-${{ matrix.component }}:latest --config structure-test-${{ matrix.component }}.yaml

  # Kubernetes manifest validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Set up Helm
        uses: azure/setup-helm@v4
        
      - name: Validate Kubernetes manifests
        run: |
          # Validate YAML syntax
          find deploy/kubernetes -name "*.yaml" -exec kubectl apply --dry-run=client -f {} \;
          
      - name: Lint Kubernetes manifests with kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          
          find deploy/kubernetes -name "*.yaml" -exec kubeval {} \;
          
      - name: Security scan with kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
          tar xf kube-score_linux_amd64.tar.gz
          sudo mv kube-score /usr/local/bin
          
          find deploy/kubernetes -name "*.yaml" -exec kube-score score {} \;

  # Integration tests with real Kubernetes
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [go-test, container-build, k8s-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: test-cluster
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
              - role: control-plane
                kubeadmConfigPatches:
                  - |
                    kind: InitConfiguration
                    nodeRegistration:
                      kubeletExtraArgs:
                        node-labels: "ingress-ready=true"
                extraPortMappings:
                  - containerPort: 80
                    hostPort: 80
                  - containerPort: 443
                    hostPort: 443
                    
      - name: Load container images to kind
        run: |
          # Build and load images
          docker build -f deploy/container/Containerfile.api -t test-api:latest .
          docker build -f deploy/container/Containerfile.monitor -t test-monitor:latest .
          
          kind load docker-image test-api:latest --name test-cluster
          kind load docker-image test-monitor:latest --name test-cluster
          
      - name: Deploy to kind cluster
        run: |
          # Update image references in manifests
          sed -i 's|image: .*api.*|image: test-api:latest|g' deploy/kubernetes/api-server-deployment.yaml
          sed -i 's|image: .*monitor.*|image: test-monitor:latest|g' deploy/kubernetes/monitor-deployment.yaml
          
          # Apply manifests
          kubectl apply -f deploy/kubernetes/
          
      - name: Wait for deployments
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/truenas-api-server
          kubectl wait --for=condition=available --timeout=300s deployment/truenas-monitor
          
      - name: Run integration tests
        run: |
          # Port forward to access services
          kubectl port-forward service/truenas-api-server 8080:8080 &
          sleep 10
          
          # Test API endpoints
          curl -f http://localhost:8080/health
          curl -f http://localhost:8080/ready
          curl -f http://localhost:8080/version
          
      - name: Collect logs on failure
        if: failure()
        run: |
          kubectl logs -l app=truenas-api-server --tail=100
          kubectl logs -l app=truenas-monitor --tail=100
          kubectl describe pods

  # Performance and load testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [go-test, container-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Install k6 for load testing
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Start services for testing
        working-directory: ./go
        run: |
          go build -o ../bin/api-server ./cmd/api-server &
          go build -o ../bin/monitor ./cmd/monitor &
          sleep 5
          
      - name: Run load tests
        run: |
          # Create k6 test script
          cat > load-test.js << EOF
          import http from 'k6/http';
          import { check } from 'k6';
          
          export let options = {
            vus: 10,
            duration: '30s',
          };
          
          export default function() {
            let response = http.get('http://localhost:8080/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
            });
          }
          EOF
          
          k6 run load-test.js

  # Documentation and changelog validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install documentation tools
        run: |
          npm install -g markdownlint-cli markdown-link-check
          
      - name: Lint markdown files
        run: |
          markdownlint docs/ README.md
          
      - name: Check markdown links
        run: |
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | xargs markdown-link-check
          
      - name: Validate OpenAPI spec
        if: hashFiles('docs/api.yaml') != ''
        run: |
          npm install -g @apidevtools/swagger-cli
          swagger-cli validate docs/api.yaml

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: secrets.SNYK_TOKEN != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects
          command: test
          
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # All checks passed gate
  ci-success:
    name: CI Success Gate
    runs-on: ubuntu-latest
    needs: 
      - go-test
      - go-lint
      - go-security
      - python-test 
      - python-lint
      - container-build
      - k8s-validation
      - docs-validation
      - dependency-scan
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          # Check required jobs (always run)
          if [[ "${{ needs.go-test.result }}" != "success" || 
                "${{ needs.go-lint.result }}" != "success" || 
                "${{ needs.go-security.result }}" != "success" || 
                "${{ needs.python-test.result }}" != "success" || 
                "${{ needs.python-lint.result }}" != "success" || 
                "${{ needs.container-build.result }}" != "success" || 
                "${{ needs.k8s-validation.result }}" != "success" || 
                "${{ needs.docs-validation.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          
          # Check optional jobs (may be skipped)
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
            echo "Dependency scan failed"
            exit 1
          fi
          
          echo "All required CI checks passed! ✅"