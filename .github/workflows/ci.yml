name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # Go Tests
  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: cd go && go mod download
        
      - name: Run tests
        run: cd go && go test ./... -v -race -coverprofile=coverage.out
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./go/coverage.out
          flags: go

  # Python Tests
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          cd python
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run tests
        run: |
          cd python
          pytest tests/ -v --cov=truenas_storage_monitor --cov-report=xml --cov-fail-under=85
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./python/coverage.xml
          flags: python

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Set up Python for security scan
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python security tools
        run: |
          pip install bandit safety
          
      - name: Run Bandit security scan
        run: |
          cd python
          bandit -r truenas_storage_monitor/ -f json -o bandit-report.json || true
          
      - name: Run Safety check
        run: |
          cd python
          safety check --json --output safety-report.json || true

  # Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: go
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python linting tools
        run: |
          pip install black flake8 mypy
          
      - name: Run Black
        run: |
          cd python
          black --check .
          
      - name: Run Flake8
        run: |
          cd python
          flake8 .
          
      - name: Run MyPy
        run: |
          cd python
          mypy truenas_storage_monitor/

  # Build Test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [go-tests, python-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build Go binaries
        run: |
          cd go
          go build -o ../bin/monitor ./cmd/monitor
          go build -o ../bin/api-server ./cmd/api-server
          go build -o ../bin/controller ./cmd/controller
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Build Python package
        run: |
          cd python
          pip install build
          python -m build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            bin/
            python/dist/

  # Container Build Test
  container-build:
    name: Container Build Test
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build monitor container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile.monitor
          push: false
          tags: truenas-monitor:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build API container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile.api
          push: false
          tags: truenas-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build CLI container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile.cli
          push: false
          tags: truenas-cli:test
          cache-from: type=gha
          cache-to: type=gha,mode=max