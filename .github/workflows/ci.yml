name: CI Pipeline

on:
  pull_request:
  push:
    branches: [main, develop]

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # Go tests
  go-test:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        working-directory: ./go
        run: go mod download
        
      - name: Run tests
        working-directory: ./go
        run: go test ./... -v -cover -coverprofile=coverage.out
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./go/coverage.out
          flags: go
          
  # Python tests
  python-test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        working-directory: ./python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Run tests
        working-directory: ./python
        run: |
          pytest tests/unit/ --cov=truenas_storage_monitor --cov-report=xml --cov-fail-under=90
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./python/coverage.xml
          flags: python
          
  # Linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linters
        run: |
          # Go linters
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          
          # Python linters
          pip install black flake8 mypy
          
      - name: Run Go linters
        working-directory: ./go
        run: |
          golangci-lint run ./...
          go vet ./...
          
      - name: Run Python linters
        working-directory: ./python
        run: |
          black . --check
          flake8 .
          mypy .
          
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Run Bandit security scan
        working-directory: ./python
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Run Safety check
        working-directory: ./python
        run: |
          pip install safety
          safety check --json || true
          
      - name: Run gosec
        working-directory: ./go
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt=json -out=gosec-report.json ./... || true
          
  # Build test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [go-test, python-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build monitor container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile.monitor
          push: false
          tags: test-monitor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build CLI container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile.cli
          push: false
          tags: test-cli:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Integration tests (only on main/develop)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [go-test, python-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kind
        uses: helm/kind-action@v1.8.0
        
      - name: Run integration tests
        run: |
          make test-integration
          
  # All tests passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [go-test, python-test, lint, security-scan, build-test]
    steps:
      - run: echo "All CI checks passed!"